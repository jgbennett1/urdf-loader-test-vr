import { RawJointAxis } from "../raw";
import { JointType, } from "./impulse_joint";
export class MultibodyJoint {
    constructor(rawSet, handle) {
        this.rawSet = rawSet;
        this.handle = handle;
    }
    static newTyped(rawSet, handle) {
        switch (rawSet.jointType(handle)) {
            case JointType.Revolute:
                return new RevoluteMultibodyJoint(rawSet, handle);
            case JointType.Prismatic:
                return new PrismaticMultibodyJoint(rawSet, handle);
            case JointType.Fixed:
                return new FixedMultibodyJoint(rawSet, handle);
            // #if DIM3
            case JointType.Spherical:
                return new SphericalMultibodyJoint(rawSet, handle);
            // #endif
            default:
                return new MultibodyJoint(rawSet, handle);
        }
    }
    /**
     * Checks if this joint is still valid (i.e. that it has
     * not been deleted from the joint set yet).
     */
    isValid() {
        return this.rawSet.contains(this.handle);
    }
}
export class UnitMultibodyJoint extends MultibodyJoint {
}
export class FixedMultibodyJoint extends MultibodyJoint {
}
export class PrismaticMultibodyJoint extends UnitMultibodyJoint {
    rawAxis() {
        return RawJointAxis.X;
    }
}
export class RevoluteMultibodyJoint extends UnitMultibodyJoint {
    rawAxis() {
        return RawJointAxis.AngX;
    }
}
// #if DIM3
export class SphericalMultibodyJoint extends MultibodyJoint {
}
// #endif
//# sourceMappingURL=multibody_joint.js.map